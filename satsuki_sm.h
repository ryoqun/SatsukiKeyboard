/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : satsuki.sm
 */

#ifndef _SATSUKI_SM_H
#define _SATSUKI_SM_H

#include <statemap.h>
#include "engine.h"

struct Turnstile;
struct satsukiContext;

struct TurnstileState {
    void(*Entry)(struct satsukiContext *const fsm);
    void(*Exit)(struct satsukiContext *const fsm);
    void(*keydown)(struct satsukiContext *const fsm, KeyEvent event);
    void(*keyup)(struct satsukiContext *const fsm, KeyEvent event);
    void(*Default)(struct satsukiContext *const fsm);
    STATE_MEMBERS
};

extern const struct TurnstileState MainMap_Normal;
extern const struct TurnstileState MainMap_Shift;
extern const struct TurnstileState MainMap_Tenkey;
extern const struct TurnstileState MainMap_PostSpace;
extern const struct TurnstileState MainMap_NestedSpace;
extern const struct TurnstileState MainMap_NestedZKeyControl;
extern const struct TurnstileState MainMap_NestedSlashControl;
extern const struct TurnstileState MainMap_PreSpace;
extern const struct TurnstileState MainMap_Space;
extern const struct TurnstileState MainMap_PreZKeyControl;
extern const struct TurnstileState MainMap_PreSlashControl;
extern const struct TurnstileState MainMap_SemiZKeyControl;
extern const struct TurnstileState MainMap_SemiSlashControl;
extern const struct TurnstileState MainMap_ZKeyControl;
extern const struct TurnstileState MainMap_SlashControl;

struct satsukiContext {
    struct Turnstile *_owner;
    FSM_MEMBERS(Turnstile)
};

#ifdef NO_SATSUKI_SM_MACRO
extern void satsukiContext_Init(struct satsukiContext *const fsm, struct Turnstile *const owner);
extern void satsukiContext_EnterStartState(struct satsukiContext *const fsm);
extern void satsukiContext_keydown(struct satsukiContext *const fsm, KeyEvent event);
extern void satsukiContext_keyup(struct satsukiContext *const fsm, KeyEvent event);
#else
#define satsukiContext_Init(fsm, owner, stack) \
    FSM_INIT((fsm), &MainMap_Normal); \
    FSM_STACK((fsm), stack); \
    (fsm)->_owner = (owner)

#define satsukiContext_EnterStartState(fsm) \
if ((getState(fsm))->Entry != NULL) { \
(getState(fsm))->Entry(fsm); \
}

#define satsukiContext_keydown(fsm, event) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "keydown"); \
    getState(fsm)->keydown((fsm), (event)); \
    setTransition((fsm), NULL)

#define satsukiContext_keyup(fsm, event) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "keyup"); \
    getState(fsm)->keyup((fsm), (event)); \
    setTransition((fsm), NULL)
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
