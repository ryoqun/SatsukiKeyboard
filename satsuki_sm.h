/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : satsuki.sm
 */

#ifndef _H_SATSUKI_SM
#define _H_SATSUKI_SM

#include <statemap.h>
#include "engine.h"

struct Turnstile;
struct satsukiContext;

struct TurnstileState
{
    void(*Entry)(struct satsukiContext*);
    void(*Exit)(struct satsukiContext*);
    
    void(*keydown)(struct satsukiContext*, KeyEvent);
    void(*keyup)(struct satsukiContext*, KeyEvent);
    
    void(*Default)(struct satsukiContext*);
    STATE_MEMBERS
};

extern const struct TurnstileState MainMap_Normal;
extern const struct TurnstileState MainMap_Shift;
extern const struct TurnstileState MainMap_Tenkey;
extern const struct TurnstileState MainMap_PreSpace;
extern const struct TurnstileState MainMap_Space;
extern const struct TurnstileState MainMap_PreZKeyControl;
extern const struct TurnstileState MainMap_PreSlashControl;
extern const struct TurnstileState MainMap_SemiZKeyControl;
extern const struct TurnstileState MainMap_SemiSlashControl;
extern const struct TurnstileState MainMap_ZKeyControl;
extern const struct TurnstileState MainMap_SlashControl;

struct satsukiContext
{
    struct Turnstile *_owner;
    FSM_MEMBERS(Turnstile)
};

#ifdef NO_SATSUKI_SM_MACRO
extern void satsukiContext_Init(struct satsukiContext*, struct Turnstile*);
extern void satsukiContext_EnterStartState(struct satsukiContext*);
extern void satsukiContext_keydown(struct satsukiContext*, KeyEvent);
extern void satsukiContext_keyup(struct satsukiContext*, KeyEvent);
#else
#define satsukiContext_Init(fsm, owner) \
FSM_INIT((fsm), &MainMap_Normal); \
(fsm)->_owner = (owner);

#define satsukiContext_EnterStartState(fsm) \
ENTRY_STATE(getState(fsm));

#define satsukiContext_keydown(fsm, event) \
getState(fsm)->keydown(fsm, event);

#define satsukiContext_keyup(fsm, event) \
getState(fsm)->keyup(fsm, event);
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
